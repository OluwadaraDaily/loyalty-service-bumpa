services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: loyalty_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - loyalty_network

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: loyalty_zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - loyalty_network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: loyalty_kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - loyalty_network

  # Backend API (Laravel)
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: loyalty_backend
    restart: unless-stopped
    working_dir: /var/www
    depends_on:
      - mysql
      - kafka
    ports:
      - "8000:8000"
    env_file:
      - .env.docker
    environment:
      - DB_HOST=mysql
      - KAFKA_BROKERS=kafka:29092
      - REDIS_HOST=redis
    volumes:
      - .:/var/www
      - /var/www/vendor
      - /var/www/node_modules
    networks:
      - loyalty_network
    command: >
      sh -c "composer install --no-dev --optimize-autoloader &&
             php artisan key:generate &&
             php artisan migrate --force &&
             php artisan serve --host=0.0.0.0 --port=8000"

  # Frontend (React/Node.js build process)
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    container_name: loyalty_frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "3000:3000"
    env_file:
      - .env.docker
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - loyalty_network
    command: npm run dev -- --host 0.0.0.0 --port 3000

  # Nginx (Optional: for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: loyalty_nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./public:/var/www/public
    networks:
      - loyalty_network

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: loyalty_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - loyalty_network

  # Kafka UI (for monitoring Kafka)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: loyalty_kafka_ui
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ${KAFKA_CLUSTER_NAME:-local}
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - loyalty_network

volumes:
  mysql_data:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local

networks:
  loyalty_network:
    driver: bridge